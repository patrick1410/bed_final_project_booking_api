// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") LATER FOR MIGRATION
}

// npm install @prisma/client

model User {
  id          String @id @default(uuid())
  username    String @unique
  password    String
  name        String
  email       String
  phoneNumber String
  pictureUrl  String

  @@index([email])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String // FK
  propertyId     String // FK
  checkInDate    DateTime
  checkOutDate   DateTime
  numberOfGuests Int
  totalPrice     Int
  bookingStatus  String
  Property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Review {
  id         String   @id @default(uuid())
  userId     String // FK
  propertyId String // FK
  rating     Int
  comment    String
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Property {
  id            String    @id @default(uuid())
  hostId        String // FK
  title         String
  description   String
  location      String
  pricePerNight Decimal   @db.Decimal(10, 2)
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int
  host          Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookings      Booking[]
  reviews       Review[]
  amenities     Amenity[]

  @@index([location, pricePerNight])
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[]
}

model Host {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  name        String
  email       String
  phoneNumber String
  pictureUrl  String
  aboutMe     String
  listings    Property[]

  @@index([name])
}

// @@index([index]) is based on:
// /properties?location=Amsterdam&pricePerNight=88&amenities=Wifi
// /bookings?userId=ee4b8bc3-4e54-4e0a-962d-d5a5570db4e7
// /users?username=PietVanMolen username is a unique value this automatically creates an unique index
// /users?email=piet@vanmolen.nl 
// /hosts?name=Linda+Pollen
